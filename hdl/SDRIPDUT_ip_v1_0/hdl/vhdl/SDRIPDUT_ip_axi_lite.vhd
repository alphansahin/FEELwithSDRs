-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\SDRIP\SDRIPDUT_ip_axi_lite.vhd
-- Created: 2022-06-06 21:53:52
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDRIPDUT_ip_axi_lite
-- Source Path: SDRIPDUT_ip/SDRIPDUT_ip_axi_lite
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDRIPDUT_ip_axi_lite IS
  PORT( reset                             :   IN    std_logic;
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_stateTimer                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_cntDetectionAsMode1          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_cntDetectionAsMode2          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_timerRXCurrent               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_timerPCCurrent               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_timerTXCurrent               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_configurationCurrent         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_cntDetectionSingle           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_IQdataSample                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic;  -- ufix1
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_timerRX                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_timerPC                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_timerTX                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_configuration               :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        reset_internal                    :   OUT   std_logic  -- ufix1
        );
END SDRIPDUT_ip_axi_lite;


ARCHITECTURE rtl OF SDRIPDUT_ip_axi_lite IS

  -- Component Declarations
  COMPONENT SDRIPDUT_ip_addr_decoder
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          data_write                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   IN    std_logic;  -- ufix1
          rd_enb                          :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_stateTimer                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_cntDetectionAsMode1        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_cntDetectionAsMode2        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_timerRXCurrent             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_timerPCCurrent             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_timerTXCurrent             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_configurationCurrent       :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          read_cntDetectionSingle         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          read_IQdataSample               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_read                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_timerRX                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_timerPC                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_timerTX                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_configuration             :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT SDRIPDUT_ip_axi_lite_module
    PORT( clk                             :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          data_read                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          data_write                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   OUT   std_logic;  -- ufix1
          rd_enb                          :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SDRIPDUT_ip_addr_decoder
    USE ENTITY work.SDRIPDUT_ip_addr_decoder(rtl);

  FOR ALL : SDRIPDUT_ip_axi_lite_module
    USE ENTITY work.SDRIPDUT_ip_axi_lite_module(rtl);

  -- Signals
  SIGNAL top_data_write                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_addr_sel                     : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL top_wr_enb                       : std_logic;  -- ufix1
  SIGNAL top_rd_enb                       : std_logic;  -- ufix1
  SIGNAL top_data_read                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_timerRX_tmp                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_timerPC_tmp                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_timerTX_tmp                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_configuration_tmp          : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL top_reset_internal               : std_logic;  -- ufix1

BEGIN
  u_SDRIPDUT_ip_addr_decoder_inst : SDRIPDUT_ip_addr_decoder
    PORT MAP( clk => AXI4_Lite_ACLK,  -- ufix1
              reset => reset,
              data_write => top_data_write,  -- ufix32
              addr_sel => top_addr_sel,  -- ufix14
              wr_enb => top_wr_enb,  -- ufix1
              rd_enb => top_rd_enb,  -- ufix1
              read_ip_timestamp => read_ip_timestamp,  -- ufix32
              read_stateTimer => read_stateTimer,  -- ufix2
              read_cntDetectionAsMode1 => read_cntDetectionAsMode1,  -- ufix32
              read_cntDetectionAsMode2 => read_cntDetectionAsMode2,  -- ufix32
              read_timerRXCurrent => read_timerRXCurrent,  -- ufix32
              read_timerPCCurrent => read_timerPCCurrent,  -- ufix32
              read_timerTXCurrent => read_timerTXCurrent,  -- ufix32
              read_configurationCurrent => read_configurationCurrent,  -- ufix2
              read_cntDetectionSingle => read_cntDetectionSingle,  -- ufix32
              read_IQdataSample => read_IQdataSample,  -- ufix32
              data_read => top_data_read,  -- ufix32
              write_axi_enable => write_axi_enable,  -- ufix1
              write_timerRX => write_timerRX_tmp,  -- ufix32
              write_timerPC => write_timerPC_tmp,  -- ufix32
              write_timerTX => write_timerTX_tmp,  -- ufix32
              write_configuration => write_configuration_tmp  -- ufix2
              );

  u_SDRIPDUT_ip_axi_lite_module_inst : SDRIPDUT_ip_axi_lite_module
    PORT MAP( clk => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              data_read => top_data_read,  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              data_write => top_data_write,  -- ufix32
              addr_sel => top_addr_sel,  -- ufix14
              wr_enb => top_wr_enb,  -- ufix1
              rd_enb => top_rd_enb,  -- ufix1
              reset_internal => top_reset_internal  -- ufix1
              );

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

  write_timerRX <= write_timerRX_tmp;

  write_timerPC <= write_timerPC_tmp;

  write_timerTX <= write_timerTX_tmp;

  write_configuration <= write_configuration_tmp;

  reset_internal <= top_reset_internal;

END rtl;

