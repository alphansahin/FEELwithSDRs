-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\SDRIP\SDRIPDUT_ip_addr_decoder.vhd
-- Created: 2022-06-06 21:53:52
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDRIPDUT_ip_addr_decoder
-- Source Path: SDRIPDUT_ip/SDRIPDUT_ip_axi_lite/SDRIPDUT_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDRIPDUT_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_stateTimer                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_cntDetectionAsMode1          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_cntDetectionAsMode2          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_timerRXCurrent               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_timerPCCurrent               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_timerTXCurrent               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_configurationCurrent         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        read_cntDetectionSingle           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_IQdataSample                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_timerRX                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_timerPC                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_timerTX                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_configuration               :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END SDRIPDUT_ip_addr_decoder;


ARCHITECTURE rtl OF SDRIPDUT_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL read_stateTimer_unsigned         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_cntDetectionAsMode1_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_stateTimer_1_1        : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_stateTimer              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_slice_stateTimer_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_stateTimer_1_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_cntDetectionAsMode1_unsigned : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_cntDetectionAsMode2_1_1 : std_logic;  -- ufix1
  SIGNAL read_reg_cntDetectionAsMode1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_cntDetectionAsMode1_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_cntDetectionAsMode2_unsigned : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_timerRXCurrent_1_1    : std_logic;  -- ufix1
  SIGNAL read_reg_cntDetectionAsMode2     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_cntDetectionAsMode2_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_timerRXCurrent_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_timerPCCurrent_1_1    : std_logic;  -- ufix1
  SIGNAL read_reg_timerRXCurrent          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_timerRXCurrent_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_timerPCCurrent_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_timerTXCurrent_1_1    : std_logic;  -- ufix1
  SIGNAL read_reg_timerPCCurrent          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_timerPCCurrent_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_timerTXCurrent_unsigned     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_configurationCurrent_unsigned : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL decode_sel_cntDetectionSingle_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_configurationCurrent_1_1 : std_logic;  -- ufix1
  SIGNAL read_reg_timerTXCurrent          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_timerTXCurrent_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_configurationCurrent    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_slice_configurationCurrent_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_configurationCurrent_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_cntDetectionSingle_unsigned : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_IQdataSample_1_1      : std_logic;  -- ufix1
  SIGNAL read_reg_cntDetectionSingle      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_cntDetectionSingle_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_IQdataSample_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_IQdataSample            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_IQdataSample_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_timerRX_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_timerRX_1_1              : std_logic;  -- ufix1
  SIGNAL data_reg_timerRX_1_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_timerPC_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_timerPC_1_1              : std_logic;  -- ufix1
  SIGNAL data_reg_timerPC_1_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_timerTX_1_1           : std_logic;  -- ufix1
  SIGNAL reg_enb_timerTX_1_1              : std_logic;  -- ufix1
  SIGNAL data_reg_timerTX_1_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_configuration_1_1     : std_logic;  -- ufix1
  SIGNAL reg_enb_configuration_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_configuration            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_reg_configuration_1_1       : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  read_stateTimer_unsigned <= unsigned(read_stateTimer);

  
  decode_sel_cntDetectionAsMode1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_stateTimer_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_stateTimer_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_stateTimer <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        read_reg_stateTimer <= read_stateTimer_unsigned;
      END IF;
    END IF;
  END PROCESS reg_stateTimer_process;


  data_slice_stateTimer_1 <= resize(read_reg_stateTimer, 32);

  
  decode_rd_stateTimer_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_stateTimer_1_1 = '0' ELSE
      data_slice_stateTimer_1;

  read_cntDetectionAsMode1_unsigned <= unsigned(read_cntDetectionAsMode1);

  
  decode_sel_cntDetectionAsMode2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  reg_cntDetectionAsMode1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_cntDetectionAsMode1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_cntDetectionAsMode1 <= read_cntDetectionAsMode1_unsigned;
      END IF;
    END IF;
  END PROCESS reg_cntDetectionAsMode1_process;


  
  decode_rd_cntDetectionAsMode1_1_1 <= decode_rd_stateTimer_1_1 WHEN decode_sel_cntDetectionAsMode1_1_1 = '0' ELSE
      read_reg_cntDetectionAsMode1;

  read_cntDetectionAsMode2_unsigned <= unsigned(read_cntDetectionAsMode2);

  
  decode_sel_timerRXCurrent_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  reg_cntDetectionAsMode2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_cntDetectionAsMode2 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_cntDetectionAsMode2 <= read_cntDetectionAsMode2_unsigned;
      END IF;
    END IF;
  END PROCESS reg_cntDetectionAsMode2_process;


  
  decode_rd_cntDetectionAsMode2_1_1 <= decode_rd_cntDetectionAsMode1_1_1 WHEN decode_sel_cntDetectionAsMode2_1_1 = '0' ELSE
      read_reg_cntDetectionAsMode2;

  read_timerRXCurrent_unsigned <= unsigned(read_timerRXCurrent);

  
  decode_sel_timerPCCurrent_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  reg_timerRXCurrent_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_timerRXCurrent <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_timerRXCurrent <= read_timerRXCurrent_unsigned;
      END IF;
    END IF;
  END PROCESS reg_timerRXCurrent_process;


  
  decode_rd_timerRXCurrent_1_1 <= decode_rd_cntDetectionAsMode2_1_1 WHEN decode_sel_timerRXCurrent_1_1 = '0' ELSE
      read_reg_timerRXCurrent;

  read_timerPCCurrent_unsigned <= unsigned(read_timerPCCurrent);

  
  decode_sel_timerTXCurrent_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0049#, 14) ELSE
      '0';

  reg_timerPCCurrent_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_timerPCCurrent <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_timerPCCurrent <= read_timerPCCurrent_unsigned;
      END IF;
    END IF;
  END PROCESS reg_timerPCCurrent_process;


  
  decode_rd_timerPCCurrent_1_1 <= decode_rd_timerRXCurrent_1_1 WHEN decode_sel_timerPCCurrent_1_1 = '0' ELSE
      read_reg_timerPCCurrent;

  read_timerTXCurrent_unsigned <= unsigned(read_timerTXCurrent);

  read_configurationCurrent_unsigned <= unsigned(read_configurationCurrent);

  
  decode_sel_cntDetectionSingle_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004B#, 14) ELSE
      '0';

  
  decode_sel_configurationCurrent_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004A#, 14) ELSE
      '0';

  reg_timerTXCurrent_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_timerTXCurrent <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_timerTXCurrent <= read_timerTXCurrent_unsigned;
      END IF;
    END IF;
  END PROCESS reg_timerTXCurrent_process;


  
  decode_rd_timerTXCurrent_1_1 <= decode_rd_timerPCCurrent_1_1 WHEN decode_sel_timerTXCurrent_1_1 = '0' ELSE
      read_reg_timerTXCurrent;

  reg_configurationCurrent_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_configurationCurrent <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        read_reg_configurationCurrent <= read_configurationCurrent_unsigned;
      END IF;
    END IF;
  END PROCESS reg_configurationCurrent_process;


  data_slice_configurationCurrent_1 <= resize(read_reg_configurationCurrent, 32);

  
  decode_rd_configurationCurrent_1_1 <= decode_rd_timerTXCurrent_1_1 WHEN decode_sel_configurationCurrent_1_1 = '0' ELSE
      data_slice_configurationCurrent_1;

  read_cntDetectionSingle_unsigned <= unsigned(read_cntDetectionSingle);

  
  decode_sel_IQdataSample_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#004C#, 14) ELSE
      '0';

  reg_cntDetectionSingle_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_cntDetectionSingle <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_cntDetectionSingle <= read_cntDetectionSingle_unsigned;
      END IF;
    END IF;
  END PROCESS reg_cntDetectionSingle_process;


  
  decode_rd_cntDetectionSingle_1_1 <= decode_rd_configurationCurrent_1_1 WHEN decode_sel_cntDetectionSingle_1_1 = '0' ELSE
      read_reg_cntDetectionSingle;

  read_IQdataSample_unsigned <= unsigned(read_IQdataSample);

  reg_IQdataSample_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_IQdataSample <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_IQdataSample <= read_IQdataSample_unsigned;
      END IF;
    END IF;
  END PROCESS reg_IQdataSample_process;


  
  decode_rd_IQdataSample_1_1 <= decode_rd_cntDetectionSingle_1_1 WHEN decode_sel_IQdataSample_1_1 = '0' ELSE
      read_reg_IQdataSample;

  data_read <= std_logic_vector(decode_rd_IQdataSample_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  
  decode_sel_timerRX_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_timerRX_1_1 <= decode_sel_timerRX_1_1 AND wr_enb;

  reg_timerRX_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_timerRX_1_1 <= to_unsigned(512, 32);
      ELSIF enb = '1' AND reg_enb_timerRX_1_1 = '1' THEN
        data_reg_timerRX_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_timerRX_1_1_process;


  write_timerRX <= std_logic_vector(data_reg_timerRX_1_1);

  
  decode_sel_timerPC_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_timerPC_1_1 <= decode_sel_timerPC_1_1 AND wr_enb;

  reg_timerPC_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_timerPC_1_1 <= to_unsigned(4096, 32);
      ELSIF enb = '1' AND reg_enb_timerPC_1_1 = '1' THEN
        data_reg_timerPC_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_timerPC_1_1_process;


  write_timerPC <= std_logic_vector(data_reg_timerPC_1_1);

  
  decode_sel_timerTX_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_enb_timerTX_1_1 <= decode_sel_timerTX_1_1 AND wr_enb;

  reg_timerTX_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_timerTX_1_1 <= to_unsigned(512, 32);
      ELSIF enb = '1' AND reg_enb_timerTX_1_1 = '1' THEN
        data_reg_timerTX_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_timerTX_1_1_process;


  write_timerTX <= std_logic_vector(data_reg_timerTX_1_1);

  
  decode_sel_configuration_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_enb_configuration_1_1 <= decode_sel_configuration_1_1 AND wr_enb;

  data_in_configuration <= data_write_unsigned(1 DOWNTO 0);

  reg_configuration_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_configuration_1_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' AND reg_enb_configuration_1_1 = '1' THEN
        data_reg_configuration_1_1 <= data_in_configuration;
      END IF;
    END IF;
  END PROCESS reg_configuration_1_1_process;


  write_configuration <= std_logic_vector(data_reg_configuration_1_1);

  write_axi_enable <= data_reg_axi_enable_1_1;

END rtl;

