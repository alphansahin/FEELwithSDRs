-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\SDRIP\SDRIPDUT_ip_src_SDR_IP_DUT.vhd
-- Created: 2022-06-06 21:52:42
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- enableTX                      ce_out        1
-- enableRX                      ce_out        1
-- chooseTXpath                  ce_out        1
-- stateTimer                    ce_out        1
-- cntDetectionAsMode1           ce_out        1
-- cntDetectionAsMode2           ce_out        1
-- timerRXCurrent                ce_out        1
-- timerPCCurrent                ce_out        1
-- timerTXCurrent                ce_out        1
-- configurationCurrent          ce_out        1
-- cntDetectionSingle            ce_out        1
-- IQdataSample                  ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SDRIPDUT_ip_src_SDR_IP_DUT
-- Source Path: SDRIP/SDR IP DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SDRIPDUT_ip_src_SDR_IP_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        inphase_in                        :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        quadrature_in                     :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        valid_in                          :   IN    std_logic;
        timerRX                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        timerPC                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        timerTX                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        configuration_rsvd                :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        ce_out                            :   OUT   std_logic;
        enableTX                          :   OUT   std_logic;
        enableRX                          :   OUT   std_logic;
        chooseTXpath                      :   OUT   std_logic;
        stateTimer                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        cntDetectionAsMode1               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        cntDetectionAsMode2               :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        timerRXCurrent                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        timerPCCurrent                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        timerTXCurrent                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        configurationCurrent              :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        cntDetectionSingle                :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        IQdataSample                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END SDRIPDUT_ip_src_SDR_IP_DUT;


ARCHITECTURE rtl OF SDRIPDUT_ip_src_SDR_IP_DUT IS

  -- Component Declarations
  COMPONENT SDRIPDUT_ip_src_Calculate_sample_energy_a_2_b_2
    PORT( real_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          imag_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          energy_Out                      :   OUT   std_logic_vector(24 DOWNTO 0)  -- ufix25
          );
  END COMPONENT;

  COMPONENT SDRIPDUT_ip_src_Accumulator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          energyIn                        :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25
          enableCorr                      :   IN    std_logic;
          result                          :   OUT   std_logic_vector(30 DOWNTO 0)  -- ufix31
          );
  END COMPONENT;

  COMPONENT SDRIPDUT_ip_src_slicer
    PORT( inputI                          :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          inputQ                          :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          isMode2                         :   IN    std_logic;
          outputI                         :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
          outputQ                         :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12
          );
  END COMPONENT;

  COMPONENT SDRIPDUT_ip_src_Xcorr_with_a_binary_sequence_s_a_s_b
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inputI                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18
          inputQ                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18
          enableCorr                      :   IN    std_logic;
          resultI                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18
          resultQ                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18
          );
  END COMPONENT;

  COMPONENT SDRIPDUT_ip_src_Calculate_xcorr_energy_s_a_2_s_b_2
    PORT( real_in                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18
          imag_in                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18
          energy_Out                      :   OUT   std_logic_vector(36 DOWNTO 0)  -- ufix37
          );
  END COMPONENT;

  COMPONENT SDRIPDUT_ip_src_Detector
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          xcorrSquareIn                   :   IN    std_logic_vector(36 DOWNTO 0);  -- ufix37
          acorrSquareIn                   :   IN    std_logic_vector(30 DOWNTO 0);  -- ufix31
          enableIn                        :   IN    std_logic;
          detectedRepeat                  :   OUT   std_logic;
          detectorCntSingle               :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT SDRIPDUT_ip_src_SDR_controller_state_machine
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          startTimers                     :   IN    std_logic;
          timerRX                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          timerPC                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          timerTX                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          configuration_rsvd              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          enableTX                        :   OUT   std_logic;
          enableRX                        :   OUT   std_logic;
          isMode2                         :   OUT   std_logic;
          stateTimer                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          cntDetectionAsMode1             :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          cntDetectionAsMode2             :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          timerRXCurrent                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          timerPCCurrent                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          timerTXCurrent                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          configurationCurrent            :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SDRIPDUT_ip_src_Calculate_sample_energy_a_2_b_2
    USE ENTITY work.SDRIPDUT_ip_src_Calculate_sample_energy_a_2_b_2(rtl);

  FOR ALL : SDRIPDUT_ip_src_Accumulator
    USE ENTITY work.SDRIPDUT_ip_src_Accumulator(rtl);

  FOR ALL : SDRIPDUT_ip_src_slicer
    USE ENTITY work.SDRIPDUT_ip_src_slicer(rtl);

  FOR ALL : SDRIPDUT_ip_src_Xcorr_with_a_binary_sequence_s_a_s_b
    USE ENTITY work.SDRIPDUT_ip_src_Xcorr_with_a_binary_sequence_s_a_s_b(rtl);

  FOR ALL : SDRIPDUT_ip_src_Calculate_xcorr_energy_s_a_2_s_b_2
    USE ENTITY work.SDRIPDUT_ip_src_Calculate_xcorr_energy_s_a_2_s_b_2(rtl);

  FOR ALL : SDRIPDUT_ip_src_Detector
    USE ENTITY work.SDRIPDUT_ip_src_Detector(rtl);

  FOR ALL : SDRIPDUT_ip_src_SDR_controller_state_machine
    USE ENTITY work.SDRIPDUT_ip_src_SDR_controller_state_machine(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay_out1                       : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Delay3_out1                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Calculate_sample_energy_a_2_b_2_out1 : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL result                           : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL result_unsigned                  : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Delay2_out1                      : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL outputQ                          : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL outputQ_signed                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Data_Type_Conversion2_out1       : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL isMode2                          : std_logic;
  SIGNAL outputI                          : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL outputI_signed                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Data_Type_Conversion1_out1       : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL resultI                          : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL resultQ                          : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL xcorrSquare                      : std_logic_vector(36 DOWNTO 0);  -- ufix37
  SIGNAL xcorrSquare_unsigned             : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL Delay4_out1                      : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL detectedRepeat                   : std_logic;
  SIGNAL detectorCntSingle                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL stateTimer_tmp                   : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL cntDetectionAsMode1_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL cntDetectionAsMode2_tmp          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL timerRXCurrent_tmp               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL timerPCCurrent_tmp               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL timerTXCurrent_tmp               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL configurationCurrent_tmp         : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL quadrature_in_signed             : signed(15 DOWNTO 0);  -- int16
  SIGNAL inphase_in_signed                : signed(15 DOWNTO 0);  -- int16
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_Calculate_sample_energy_a_2_b_2 : SDRIPDUT_ip_src_Calculate_sample_energy_a_2_b_2
    PORT MAP( real_in => std_logic_vector(Delay3_out1),  -- sfix12
              imag_in => std_logic_vector(Delay_out1),  -- sfix12
              energy_Out => Calculate_sample_energy_a_2_b_2_out1  -- ufix25
              );

  u_Accumulator : SDRIPDUT_ip_src_Accumulator
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              energyIn => Calculate_sample_energy_a_2_b_2_out1,  -- ufix25
              enableCorr => Delay1_out1,
              result => result  -- ufix31
              );

  u_slicer : SDRIPDUT_ip_src_slicer
    PORT MAP( inputI => inphase_in,  -- int16
              inputQ => quadrature_in,  -- int16
              isMode2 => isMode2,
              outputI => outputI,  -- sfix12
              outputQ => outputQ  -- sfix12
              );

  u_Xcorr_with_a_binary_sequence_s_a_s_b : SDRIPDUT_ip_src_Xcorr_with_a_binary_sequence_s_a_s_b
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              inputI => std_logic_vector(Data_Type_Conversion1_out1),  -- sfix18
              inputQ => std_logic_vector(Data_Type_Conversion2_out1),  -- sfix18
              enableCorr => Delay1_out1,
              resultI => resultI,  -- sfix18
              resultQ => resultQ  -- sfix18
              );

  u_Calculate_xcorr_energy_s_a_2_s_b_2 : SDRIPDUT_ip_src_Calculate_xcorr_energy_s_a_2_s_b_2
    PORT MAP( real_in => resultI,  -- sfix18
              imag_in => resultQ,  -- sfix18
              energy_Out => xcorrSquare  -- ufix37
              );

  u_Detector : SDRIPDUT_ip_src_Detector
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              xcorrSquareIn => std_logic_vector(Delay4_out1),  -- ufix37
              acorrSquareIn => std_logic_vector(Delay2_out1),  -- ufix31
              enableIn => Delay5_out1,
              detectedRepeat => detectedRepeat,
              detectorCntSingle => detectorCntSingle  -- uint32
              );

  u_SDR_controller_state_machine : SDRIPDUT_ip_src_SDR_controller_state_machine
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              startTimers => detectedRepeat,
              timerRX => timerRX,  -- uint32
              timerPC => timerPC,  -- uint32
              timerTX => timerTX,  -- uint32
              configuration_rsvd => configuration_rsvd,  -- ufix2
              enableTX => enableTX,
              enableRX => enableRX,
              isMode2 => isMode2,
              stateTimer => stateTimer_tmp,  -- ufix2
              cntDetectionAsMode1 => cntDetectionAsMode1_tmp,  -- uint32
              cntDetectionAsMode2 => cntDetectionAsMode2_tmp,  -- uint32
              timerRXCurrent => timerRXCurrent_tmp,  -- uint32
              timerPCCurrent => timerPCCurrent_tmp,  -- uint32
              timerTXCurrent => timerTXCurrent_tmp,  -- uint32
              configurationCurrent => configurationCurrent_tmp  -- ufix2
              );

  enb <= clk_enable;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay5_reg(0) <= Delay1_out1;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  result_unsigned <= unsigned(result);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_unsigned(16#00000000#, 31);
      ELSIF enb = '1' THEN
        Delay2_out1 <= result_unsigned;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  outputQ_signed <= signed(outputQ);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay_out1 <= outputQ_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Data_Type_Conversion2_out1 <= resize(Delay_out1, 18);

  outputI_signed <= signed(outputI);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay3_out1 <= outputI_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Data_Type_Conversion1_out1 <= resize(Delay3_out1, 18);

  xcorrSquare_unsigned <= unsigned(xcorrSquare);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_unsigned(0, 37);
      ELSIF enb = '1' THEN
        Delay4_out1 <= xcorrSquare_unsigned;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  quadrature_in_signed <= signed(quadrature_in);

  inphase_in_signed <= signed(inphase_in);

  Bit_Concat_out1 <= unsigned(quadrature_in_signed) & unsigned(inphase_in_signed);

  IQdataSample <= std_logic_vector(Bit_Concat_out1);

  ce_out <= clk_enable;

  chooseTXpath <= isMode2;

  stateTimer <= stateTimer_tmp;

  cntDetectionAsMode1 <= cntDetectionAsMode1_tmp;

  cntDetectionAsMode2 <= cntDetectionAsMode2_tmp;

  timerRXCurrent <= timerRXCurrent_tmp;

  timerPCCurrent <= timerPCCurrent_tmp;

  timerTXCurrent <= timerTXCurrent_tmp;

  configurationCurrent <= configurationCurrent_tmp;

  cntDetectionSingle <= detectorCntSingle;

END rtl;

